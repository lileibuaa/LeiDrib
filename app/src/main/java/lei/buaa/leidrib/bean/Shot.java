package lei.buaa.leidrib.bean;

import java.util.List;
import lei.buaa.leidrib.greenDao.DaoSession;
import de.greenrobot.dao.DaoException;

import lei.buaa.leidrib.greenDao.CommentDao;
import lei.buaa.leidrib.greenDao.ImagesDao;
import lei.buaa.leidrib.greenDao.ShotDao;
import lei.buaa.leidrib.greenDao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SHOT".
 */
public class Shot {

    private Long id;
    /** Not-null value. */
    private String title;
    private String description;
    private Long user_id;
    private Long image_id;
    private Integer views_count;
    private Integer likes_count;
    private Integer comments_count;
    private Boolean animated;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShotDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Images images;
    private Long images__resolvedKey;

    private List<Comment> commentList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Shot() {
    }

    public Shot(Long id) {
        this.id = id;
    }

    public Shot(Long id, String title, String description, Long user_id, Long image_id, Integer views_count, Integer likes_count, Integer comments_count, Boolean animated) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.user_id = user_id;
        this.image_id = image_id;
        this.views_count = views_count;
        this.likes_count = likes_count;
        this.comments_count = comments_count;
        this.animated = animated;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShotDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public Long getImage_id() {
        return image_id;
    }

    public void setImage_id(Long image_id) {
        this.image_id = image_id;
    }

    public Integer getViews_count() {
        return views_count;
    }

    public void setViews_count(Integer views_count) {
        this.views_count = views_count;
    }

    public Integer getLikes_count() {
        return likes_count;
    }

    public void setLikes_count(Integer likes_count) {
        this.likes_count = likes_count;
    }

    public Integer getComments_count() {
        return comments_count;
    }

    public void setComments_count(Integer comments_count) {
        this.comments_count = comments_count;
    }

    public Boolean getAnimated() {
        return animated;
    }

    public void setAnimated(Boolean animated) {
        this.animated = animated;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user_id = user == null ? null : user.getId();
            user__resolvedKey = user_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Images getImages() {
        Long __key = this.image_id;
        if (images__resolvedKey == null || !images__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImagesDao targetDao = daoSession.getImagesDao();
            Images imagesNew = targetDao.load(__key);
            synchronized (this) {
                images = imagesNew;
            	images__resolvedKey = __key;
            }
        }
        return images;
    }

    public void setImages(Images images) {
        synchronized (this) {
            this.images = images;
            image_id = images == null ? null : images.getId();
            images__resolvedKey = image_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comment> getCommentList() {
        if (commentList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            List<Comment> commentListNew = targetDao._queryShot_CommentList(id);
            synchronized (this) {
                if(commentList == null) {
                    commentList = commentListNew;
                }
            }
        }
        return commentList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCommentList() {
        commentList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Images getImagesLocal() {
        if (images == null)
            return getImages();
        return images;
    }

    public User getUserLocal() {
        if (user == null)
            return getUser();
        return user;
    }
    // KEEP METHODS END

}

package lei.buaa.leidrib.greenDao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import lei.buaa.leidrib.bean.Images;
import lei.buaa.leidrib.bean.User;

import lei.buaa.leidrib.bean.Shot;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOT".
*/
public class ShotDao extends AbstractDao<Shot, Long> {

    public static final String TABLENAME = "SHOT";

    /**
     * Properties of entity Shot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property User_id = new Property(3, Long.class, "user_id", false, "USER_ID");
        public final static Property Image_id = new Property(4, Long.class, "image_id", false, "IMAGE_ID");
        public final static Property Views_count = new Property(5, Integer.class, "views_count", false, "VIEWS_COUNT");
        public final static Property Likes_count = new Property(6, Integer.class, "likes_count", false, "LIKES_COUNT");
        public final static Property Comments_count = new Property(7, Integer.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Animated = new Property(8, Boolean.class, "animated", false, "ANIMATED");
    };

    private DaoSession daoSession;

    private Query<Shot> user_ShotListQuery;

    public ShotDao(DaoConfig config) {
        super(config);
    }
    
    public ShotDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"USER_ID\" INTEGER," + // 3: user_id
                "\"IMAGE_ID\" INTEGER," + // 4: image_id
                "\"VIEWS_COUNT\" INTEGER," + // 5: views_count
                "\"LIKES_COUNT\" INTEGER," + // 6: likes_count
                "\"COMMENTS_COUNT\" INTEGER," + // 7: comments_count
                "\"ANIMATED\" INTEGER);"); // 8: animated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Shot entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(4, user_id);
        }
 
        Long image_id = entity.getImage_id();
        if (image_id != null) {
            stmt.bindLong(5, image_id);
        }
 
        Integer views_count = entity.getViews_count();
        if (views_count != null) {
            stmt.bindLong(6, views_count);
        }
 
        Integer likes_count = entity.getLikes_count();
        if (likes_count != null) {
            stmt.bindLong(7, likes_count);
        }
 
        Integer comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindLong(8, comments_count);
        }
 
        Boolean animated = entity.getAnimated();
        if (animated != null) {
            stmt.bindLong(9, animated ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Shot entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Shot readEntity(Cursor cursor, int offset) {
        Shot entity = new Shot( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // image_id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // views_count
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // likes_count
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // comments_count
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // animated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Shot entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setImage_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setViews_count(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLikes_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setComments_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAnimated(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Shot entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Shot entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "shotList" to-many relationship of User. */
    public List<Shot> _queryUser_ShotList(Long user_id) {
        synchronized (this) {
            if (user_ShotListQuery == null) {
                QueryBuilder<Shot> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_ShotListQuery = queryBuilder.build();
            }
        }
        Query<Shot> query = user_ShotListQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getImagesDao().getAllColumns());
            builder.append(" FROM SHOT T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN IMAGES T1 ON T.\"IMAGE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Shot loadCurrentDeep(Cursor cursor, boolean lock) {
        Shot entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        Images images = loadCurrentOther(daoSession.getImagesDao(), cursor, offset);
        entity.setImages(images);

        return entity;    
    }

    public Shot loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Shot> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Shot> list = new ArrayList<Shot>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Shot> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Shot> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

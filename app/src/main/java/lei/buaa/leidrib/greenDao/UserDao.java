package lei.buaa.leidrib.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import lei.buaa.leidrib.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Avatar_url = new Property(3, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Bio = new Property(4, String.class, "bio", false, "BIO");
        public final static Property Followers_count = new Property(5, Integer.class, "followers_count", false, "FOLLOWERS_COUNT");
        public final static Property Followings_count = new Property(6, Integer.class, "followings_count", false, "FOLLOWINGS_COUNT");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"USERNAME\" TEXT NOT NULL ," + // 2: username
                "\"AVATAR_URL\" TEXT NOT NULL ," + // 3: avatar_url
                "\"BIO\" TEXT," + // 4: bio
                "\"FOLLOWERS_COUNT\" INTEGER," + // 5: followers_count
                "\"FOLLOWINGS_COUNT\" INTEGER);"); // 6: followings_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUsername());
        stmt.bindString(4, entity.getAvatar_url());
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(5, bio);
        }
 
        Integer followers_count = entity.getFollowers_count();
        if (followers_count != null) {
            stmt.bindLong(6, followers_count);
        }
 
        Integer followings_count = entity.getFollowings_count();
        if (followings_count != null) {
            stmt.bindLong(7, followings_count);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // username
            cursor.getString(offset + 3), // avatar_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bio
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // followers_count
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // followings_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setAvatar_url(cursor.getString(offset + 3));
        entity.setBio(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFollowers_count(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFollowings_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
